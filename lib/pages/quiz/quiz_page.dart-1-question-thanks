import 'dart:async';

import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:pharmaaccess/apis/quiz_provider.dart';
import 'package:pharmaaccess/models/quiz_answer_model.dart';
import 'package:pharmaaccess/models/quiz_question_model.dart';
import 'package:pharmaaccess/pages/quiz/quiz_result_widget.dart';
import 'package:pharmaaccess/services/quiz_service.dart';
import 'package:pharmaaccess/services/score_service.dart';
import 'package:pharmaaccess/theme.dart';
import 'package:pharmaaccess/pages/quiz/choice_answer_widget.dart';

class QuizPage extends StatefulWidget {
  final String category;
  final int uid;

  QuizPage({Key key, @required this.category, this.uid}) : super(key: key);

  @override
  _QuizPageState createState() => _QuizPageState();
}

class _QuizPageState extends State<QuizPage> {
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
  List<QuizQuestion> questions;
  List<int> choicesToExclude;
  int currentLevel;
  String sessionId;
  int uid;

  List<QuizAnswer> quizAnswer = [];
  int currentIndex;
  int selectedIndex;
  QuizQuestion currentQuestion;
  int sessionScore = 0;

  Timer _timer;
  int _allowedTime = 90;
  int minutes;
  int seconds;
  int earnedScore=0;

  @override
  void initState() {
    // TODO: implement initState
    selectedIndex = -1;
    currentIndex = 0;
    uid = widget.uid;
    //this.currentQuestion = questions[currentIndex];
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        backgroundColor: primaryColor,
        title: Text("Socrates"),
      ),
      body: FutureBuilder<List<QuizQuestion>>(
          future: QuizService().getQuestions(widget.category),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              if (snapshot.hasData) {
                questions = snapshot.data;
                currentIndex = 0;
                if (questions.length == 0) {
                  return Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Center(child: Text("No questions available in this category yet, Please try later.")),
                  );
                }
                this.currentQuestion = questions[currentIndex];
                return Column(
                  children: <Widget>[
                    Expanded(
                      child: Container(
                        padding: EdgeInsets.all(20),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: <Widget>[
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: <Widget>[
                                Row(
                                  children: <Widget>[
                                    FaIcon(
                                      FontAwesomeIcons.clock,
                                      color: primaryColor,
                                      size: 28,
                                    ),
                                    CountDownTimerWidget(countdownSeconds: 90, completedCallback: timeCompleted,),
                                  ],
                                ),
                                Text("$sessionScore Points",
                                    style: stylePrimaryColorHeadline2),
                              ],
                            ),
                            Divider(
                              height: 20,
                              color: Color(0x00FFFFFF),
                            ),
                            Container(
                              decoration: softCardShadow,
                              width: double.infinity,
                              padding: EdgeInsets.symmetric(
                                vertical: 12,
                                horizontal: 6,
                              ),
                              margin: EdgeInsets.only(bottom: 12),
                              child: RichText(
                                text: TextSpan(
                                  children: <TextSpan>[
                                    TextSpan(
                                        text: "Q:   ",
                                        style: styleNormalBodyText.copyWith(
                                            color: primaryColor,
                                            fontWeight: FontWeight.w600)),
                                    TextSpan(
                                        text: currentQuestion.question,
                                        style: styleNormalBodyText.copyWith(
                                            fontWeight: FontWeight.w600)),
                                  ],
                                ),
                              ),
                            ),
                            Expanded(
                              child: ListView.builder(
                                itemCount: currentQuestion.applicableChoices,
                                itemBuilder: (BuildContext context, int index) {
                                  return ChoiceAnswerWidget(
                                    currentQuestion: currentQuestion,
                                    callback: itemClicked,
                                    index: index,
                                    currentIndex: selectedIndex,
                                  );
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    //Show button
                    SizedBox(
                      height: 60,
                      width: double.infinity,
                      child: Container(
                        child: RaisedButton(
                          color: primaryColor,
                          padding: const EdgeInsets.all(8.0),
                          child: Text(
                            "SUBMIT ANSWER",
                            style: Theme.of(context)
                                .textTheme
                                .display1
                                .apply(
                                  color: Colors.white,
                                )
                                .copyWith(fontWeight: FontWeight.w600),
                          ),
                          onPressed: () async {
                            if (selectedIndex < 0) {
                              _scaffoldKey.currentState.showSnackBar(
                                SnackBar(
                                  content: Text("Please select an answer first."),
                                  duration: Duration(seconds: 2),
                                ),
                              );
                              return;
                            } else {
                              String givenAnswer = currentQuestion.choices["choice_${selectedIndex + 1}"];
                                if (currentQuestion.answer.toLowerCase() ==
                                    givenAnswer.toLowerCase() ) {
                                  sessionScore = sessionScore + 2;
                                  earnedScore = 1;
                                }
                                QuizAnswer answer = QuizAnswer(uid: uid, questionId: currentQuestion.questionId,
                                    answerGiven: givenAnswer, questionCategory: currentQuestion.questionCategory,
                                    answerStatus: givenAnswer == currentQuestion.answer ? AnswerStatus.right : AnswerStatus.wrong, correctAnswer: currentQuestion.answer, points: earnedScore
                                );
                                var quizService = QuizService();
                                var submitAnswer = await quizService.submitAnswer(answer);
                                ScoreService().refreshScore();
                                var answers = await quizService.getTodayQuizCount();
                                await quizService.updateDailyQuizCount(answers+1);
                                setState(() {
//                                  currentIndex += 1;
//                                  currentQuestion = questions[currentIndex];
                                  selectedIndex = -1;
                                  sessionScore = sessionScore;
                                });
                                Navigator.pop(context);
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (context) => QuizResultWidget(correctAnswer: currentQuestion.answer, givenAnswer: givenAnswer,answerDescription: currentQuestion.answerDescription)),
                                );
                              }
                          },
                        ),
                      ),
                    )
                  ],
                );
              } else {
                return Center(child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    Text("Error fetching Quiz Question."),
                    Divider(height: 12,),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                        });
                      },
                      child: Column(
                        children: <Widget>[
                          Icon(Icons.refresh),
                          Text("Retry", style: TextStyle(fontSize: 12,)),
                        ],
                      ),
                    ),
                  ],
                ));
              }
            } else {
              return Center(
                child: Container(
                  height: 96,
                  width: 96,
                  child: CircularProgressIndicator(),
                ),
              );
            }
          }),
    );
  }

  void itemClicked(index) {
    int value = index == selectedIndex ? -1 : index;
    setState(() {
      selectedIndex = value;
    });
  }

  void timeCompleted() {
    Navigator.push(
      context,
      MaterialPageRoute(
          builder: (context) => QuizResultWidget(correctAnswer: currentQuestion.answer, answerDescription: currentQuestion.answerDescription)),
    );
  }
}


class CountDownTimerWidget extends StatefulWidget {
  final int countdownSeconds;
  final String formatString;
  final VoidCallback completedCallback;

  CountDownTimerWidget({Key key, @required this.countdownSeconds, this.formatString, @required this.completedCallback}) : super(key: key);
  @override
  _CountDownTimerWidgetState createState() => _CountDownTimerWidgetState();
}

class _CountDownTimerWidgetState extends State<CountDownTimerWidget> {
  int minutes;
  int seconds;
  int currentSeconds;
  Timer _timer;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    currentSeconds = widget.countdownSeconds;
    minutes = (currentSeconds / 60).floor();
    seconds = currentSeconds - minutes * 60;
    startTimer();
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }
  void startTimer() {
    const oneSec = const Duration(seconds: 1);
    _timer = new Timer.periodic(
      oneSec,
          (Timer timer) => setState(
            () {
          if (currentSeconds < 1) {
            //TODO - if not last question, move to next question and reset timer to 90 else cancel timer and move to thank you.
            timer.cancel();
            widget.completedCallback();
          } else {
            currentSeconds = currentSeconds - 1;
            minutes = (currentSeconds / 60).floor();
            seconds = currentSeconds - minutes * 60;
          }
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Text(" 00:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}",
        style: stylePrimaryColorHeadline2);
  }
}